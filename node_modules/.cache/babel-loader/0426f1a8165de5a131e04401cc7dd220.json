{"ast":null,"code":"import _regeneratorRuntime from \"/home/vishal/blogpost/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/vishal/blogpost/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _ from 'lodash';\nimport JsonPlaceHolder from '../apis/JsonPlaceHolder';\nexport var fetchPostAndUser = function fetchPostAndUser() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var userIds;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(fetchPosts());\n\n              case 2:\n                // console.log(getState().posts);\n                userIds = _.uniq(_.map(getState().posts, 'userId'));\n                userIds.for;\n                console.log(userIds);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //Creating ActionCreator\n\nexport var fetchPosts = function fetchPosts() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return JsonPlaceHolder.get('/posts');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: 'FETCH_POST',\n                  payload: response\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchUser = function fetchUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return JsonPlaceHolder.get(\"/users/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: 'FETCH_USER',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\n/*export const fetchUser =  id => dispatch => {\n   _fetchUser(id,dispatch); \n}\n   //return async function (dispatch)  {\n       const _fetchUser = _.memoize(async (id,dispatch)=>{\n        const response = await JsonPlaceHolder.get(`/users/${id}`);\n\n        dispatch({ type: 'FETCH_USER', payload: response.data });\n    \n       });*/","map":{"version":3,"sources":["/home/vishal/blogpost/src/actions/index.js"],"names":["_","JsonPlaceHolder","fetchPostAndUser","dispatch","getState","fetchPosts","userIds","uniq","map","posts","for","console","log","get","response","type","payload","fetchUser","id","data"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAOC,QAAP,EAAgBC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE5BD,QAAQ,CAACE,UAAU,EAAX,CAFoB;;AAAA;AAGnC;AACOC,gBAAAA,OAJ4B,GAIlBN,CAAC,CAACO,IAAF,CAAOP,CAAC,CAACQ,GAAF,CAAMJ,QAAQ,GAAGK,KAAjB,EAAuB,QAAvB,CAAP,CAJkB;AAKlCH,gBAAAA,OAAO,CAACI,GAAR;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;;AANkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,C,CAUP;;AACA,OAAO,IAAMD,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAMF,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACLF,eAAe,CAACY,GAAhB,CAAoB,QAApB,CADK;;AAAA;AACtBC,gBAAAA,QADsB;AAG5BX,gBAAAA,QAAQ,CAAC;AAAEY,kBAAAA,IAAI,EAAE,YAAR;AAAsBC,kBAAAA,OAAO,EAAEF;AAA/B,iBAAD,CAAR;;AAH4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAOP,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,kBAAMf,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACJF,eAAe,CAACY,GAAhB,kBAA8BK,EAA9B,EADI;;AAAA;AACrBJ,gBAAAA,QADqB;AAG3BX,gBAAAA,QAAQ,CAAC;AAAEY,kBAAAA,IAAI,EAAE,YAAR;AAAsBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACK;AAAxC,iBAAD,CAAR;;AAH2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAOP","sourcesContent":["import _ from 'lodash';\nimport JsonPlaceHolder from '../apis/JsonPlaceHolder';\n\nexport const fetchPostAndUser = () => async (dispatch,getState) => {\n    \n    await dispatch(fetchPosts());\n   // console.log(getState().posts);\n    const userIds = _.uniq(_.map(getState().posts,'userId'));\n    userIds.for\n    console.log(userIds);\n    \n};\n\n//Creating ActionCreator\nexport const fetchPosts = () => async dispatch => {\n    const response = await JsonPlaceHolder.get('/posts');\n\n    dispatch({ type: 'FETCH_POST', payload: response });\n\n};\n\nexport const fetchUser = id => async dispatch => {\n    const response = await JsonPlaceHolder.get(`/users/${id}`);\n\n    dispatch({ type: 'FETCH_USER', payload: response.data});\n\n};\n\n/*export const fetchUser =  id => dispatch => {\n   _fetchUser(id,dispatch); \n}\n   //return async function (dispatch)  {\n       const _fetchUser = _.memoize(async (id,dispatch)=>{\n        const response = await JsonPlaceHolder.get(`/users/${id}`);\n\n        dispatch({ type: 'FETCH_USER', payload: response.data });\n    \n       });*/\n    \n    "]},"metadata":{},"sourceType":"module"}